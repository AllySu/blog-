一. RegExp类型

正则表达式 = /pattern/flags

pattern是模式匹配

模式匹配中的元字符：带有特定的作用

( [ { \ ^ $ | ) ? * + .] }

^ 以...开头

$ 以...结尾

? 出现0次或者1次（最多出现1次）

* 出现任意次

{n} 出现n次

{n,m} 出现n到m次

{n,} 至少出现n次

.      等价于   [^\n\r]          除了回车和换行之外的所有字符
\d     等价于   [0-9]            数字字符
\D     等价于   [^0-9]           非数字字符
\s     等价于   [\t\n\x0B\f\r]   空白符
\S     等价于   [^ \t\n\x0B\f\r] 非空白符
\w     等价于   [a-zA-Z_0-9]     单词字符（字母、数字、下划线）
\W     等价于   [^a-zA-Z_0-9]    非单词字符
\b     单词边界
\B     非单词边界
分组()

或 |

flags表明三种匹配的标志：

g 全局匹配
i 不区分大小写的匹配
m 多行模式

1. 创建RegExp类型

字面量定义的方法

var pattern1 = /[ba]t/g ;

使用RegExp构造函数

var pattern2 = new RegExp('[ba]t','g');

参数是字符串

2. RegExp对象的方法

var reg = /…/;

test()方法

reg.test(字符串)   返回值为true或者false

exec()方法

获取捕获组的方法，返回的是一个数组

match()和replace()是字符串的方法


--------------------------------------------------------------------------------------------------
var re = /^[1-9]{4,10}$/gi;

var str = "123456";

alert(re.test(str));    // 返回true

alert(re.lastIndex);   // 弹出6

表示上一次在第6个字符之后结束
那么下一次再调用 test 的时候， 就会从第6个字符之后继续搜索
解决办法，将正则表达式的 lastIndex 属性设置为0.

<script type="text/javascript">
var re = /^[1-9]{4,10}$/gi;
var str = "123456";
alert(re.test(str));      //返回true
re.lastIndex=0;
alert(re.test(str));      //返回true
</script>


JavaScript表单验证email邮箱，判断一个输入量是否为邮箱email，通过正则表达式实现。

function check(){
   var email=document.getElementById("email").value;
   var isemail=/^[a-z]([a-z0-9]*[-_]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\.][a-z]{2,3}([\.][a-z]{2})?$/i;
   if (email=="") {
      alert("请输入您的邮箱!");
      return false;
    }
  if (email.length>25){
     alert("长度太长");
     return false
  }
  if (!isemail.test(email)){
     alert("不是邮箱");
    return false;
  }
}
