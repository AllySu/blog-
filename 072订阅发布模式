今天面试让手写了一个类似jquery里面的on、trigger的程序


$(".ele").on("click",function(){
    console.log("clicking");//监听事件（订阅）
});

$(".ele").trigger("click");//触发事件（发布）

程序实现如下：


var callbacks = {};
      function on(type,func){
          if(!callbacks[type]){
              callbacks[type] = [];
          }
          callbacks[type].push(func);
      }

      function trigger(type){
          var args = Array.prototype.slice.apply(arguments,1);
          if(!callbacks[type]){
              return;
          }else{
              for(var i = 0;i < callbacks[type].length;i++){
                  callbacks[type][i].apply(this,args);
              }
          }
      }

这个程序就是一个订阅/发布模式的程序。

注意：

一个type类型可以使用on来监听若干个事件，所以在trigger里面需要使用循环来调用这个type上的所有的事件处理程序

trigger还可以传入参数给事件处理程序


$(".ele").on("click",function(a){
    console.log("clicking" + a);//监听事件（订阅）
});

$(".ele").trigger("click", '1');//触发事件（发布）





----------------------------------------------------------------------------------------------------

2018.06.06

举个板栗：

$(dom).addEvent("alert", function() {
    alert("弹弹弹，弹走鱼尾纹~~");
});

// 创建
var evt = document.createEvent("HTMLEvents");
// 初始化
evt.initEvent("alert", false, false);

// 触发, 即弹出文字
dom.dispatchEvent(evt);举个板栗：

$(dom).addEvent("alert", function() {
    alert("弹弹弹，弹走鱼尾纹~~");
});

// 创建
var evt = document.createEvent("HTMLEvents");
// 初始化
evt.initEvent("alert", false, false);

// 触发, 即弹出文字
dom.dispatchEvent(evt);




----------------------------------------------------------
2019.07.28
let event = {
    list: {},
    on(key, fn) {
        if (!this.list[key]) {
            this.list[key] = [];
        }
        this.list[key].push(fn);
    },
    emit() {
        let key = [].shift.call(arguments),
            fns = this.list[key];

        if (!fns || fns.length === 0) {
            return false;
        }
        fns.forEach(fn => {
            fn.apply(this, arguments);
        });
    },
    remove(key, fn) {
        // 这回我们加入了取消订阅的方法
        let fns = this.list[key];
        // 如果缓存列表中没有函数，返回false
        if (!fns) return false;
        // 如果没有传对应函数的话
        // 就会将key值对应缓存列表中的函数都清空掉
        if (!fn) {
            fns && (fns.length = 0);
        } else {
            // 遍历缓存列表，看看传入的fn与哪个函数相同
            // 如果相同就直接从缓存列表中删掉即可
            fns.forEach((cb, i) => {
                if (cb === fn) {
                    fns.splice(i, 1);
                }
            });
        }
    }
};

function cat() {
    console.log('一起喵喵喵');
}

function dog() {
    console.log('一起旺旺旺');
}

event.on('pet', data => {
    console.log('接收数据');
    console.log(data);
});
event.on('pet', cat);
event.on('pet', dog);
// 取消dog方法的订阅
event.remove('pet', dog);
// 发布
event.emit('pet', ['二哈', '波斯猫']);
/*
    接收数据
    [ '二哈', '波斯猫' ]
    一起喵喵喵
*/
