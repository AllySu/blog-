
Object.extend = function(destination, source) { // 一个静态方法表示继承, 目标对象将拥有源对象的所有属性和方法
for (var property in source) {
    destination[property] = source[property];   // 利用动态语言的特性, 通过赋值动态添加属性与方法
}
return destination;   // 返回扩展后的对象
}

Object.extend(Object, {
inspect: function(object) {   // 一个静态方法, 传入一个对象, 返回对象的字符串表示
    try {
      if (object == undefined) return 'undefined'; // 处理undefined情况
      if (object == null) return 'null';     // 处理null情况
      // 如果对象定义了inspect方法, 则调用该方法返回, 否则返回对象的toString()值
      return object.inspect ? object.inspect() : object.toString();
    } catch (e) {
      if (e instanceof RangeError) return '...'; // 处理异常情况
      throw e;
    }
},
keys: function(object) {     // 一个静态方法, 传入一个对象, 返回该对象中所有的属性, 构成数组返回
    var keys = [];
    for (var property in object)
      keys.push(property);     // 将每个属性压入到一个数组中
    return keys;
},
values: function(object) {   // 一个静态方法, 传入一个对象, 返回该对象中所有属性所对应的值, 构成数组返回
    var values = [];
    for (var property in object) values.push(object[property]); // 将每个属性的值压入到一个数组中
    return values;
},
clone: function(object) {    // 一个静态方法, 传入一个对象, 克隆一个新对象并返回
    return Object.extend({}, object);
}
});







//遍历
function bianli(obj, fn) {
    var key;
    if (obj instanceof Array) {
        obj.forEach(function(item, index) {
            fn(index, item)
        })
    } else {
        for (key in obj) {
            fn(key, obj[key]);
        }
    }

}


//节流
var textarea = document.getElementById('text');

var timeoutId;
textarea.addEventListener('keyup', function() {
    if (timeoutId) {
        clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(function() {
        /* body... */
    }, 100);
});


//返回十位的字符串
var random = Math.round();
var random = random + '0000000000';
var random = random.slice(0, 10);
console.log(random);



//---------------------------------------------------------------------------

//原型对象

Array.prototype.indexOf = function(obj) {
    var result = -1,
        length = this.length,
        i = length - 1;
    for (; i >= 0; i--) {
        if (this[i] == obj) {
            result = i;
            break;
        }
    }
    return result;
}
Array.prototype.contains = function(obj) {
    return (this.indexOf(obj) >= 0)
}
Array.prototype.append = function(obj, nodup) {
    if (!(nodup && this.contains(obj))) {
        this[this.length] = obj;
    }
}
Array.prototype.remove = function(obj) {
    var index = this.indexOf(obj);
    if (!index) return;
    return this.splice(index, 1);
};

function addEvent(element, type, fun) {
    if (!element.events) element.events = {};
    var handlers = element.events[type];
    if (!handlers) {
        handlers = element.events[type] = [];
        if (element['on' + type]) {
            handlers[0] = element['on' + type];
        }
    }
    handlers.append(fun, true)
    element['on' + type] = handleEvent;
}

function removeEvent(element, type, fun) {
    if (element.events && element.events[type]) {
        element.events[type].remove(fun);
    }
}

function handleEvent(event) {
    var returnValue = true,
        i = 0;
    event = event || fixEvent(window.event);
    var handlers = this.events[event.type],
        length = handlers.length;
    for (; i < length; i++) {
        if (handlers[i].call(this, event) === false) {
            returnValue = false;
        }
    }
    return returnValue;
}

function fixEvent(event) {
    event.preventDefault = fixEvent.preventDefault;
    event.stopPropagation = fixEvent.stopPropagation;
    return event;
}
fixEvent.preventDefault = function() {
    this.returnValue = false;
};
fixEvent.stopPropagation = function() {
    this.cancelBubble = true;
};

//--------------------------------------------------------------------------



//给Object对象增加静态方法extend,该方法的作为复制source有所有属性和方法到destination
Object.extend = function(destination, source) {
    for (var property in source) {
        destination[property] = source[property];
    }
    return destination;
}

var Dog = function(name) {
    this.name = name;
}
//将printName方法复制给dog.prototype
Object.extend(Dog.prototype, {
    printName: function() {
        alert(this.name);
    }
});
var a = new Dog("dog");
a.printName();



var o1 = { hello: 1, old: 555 },
    o2 = {
        abc: 55555555,
        hello: 2,
        fun: function() {
            alert(111);
        }
    },
    o3 = { third: 9999 };

function cloneObj(oldObj) { //复制对象方法
    if (typeof(oldObj) != 'object') return oldObj;
    if (oldObj == null) return oldObj;
    var newObj = new Object();
    for (var i in oldObj)
        newObj[i] = cloneObj(oldObj[i]);
    return newObj;
};

function extendObj() { //扩展对象
    var args = arguments;
    if (args.length < 2) return;
    var temp = cloneObj(args[0]); //调用复制对象方法
    for (var n = 1; n < args.length; n++) {
        for (var i in args[n]) {
            temp[i] = args[n][i];
        }
    }
    return temp;
}
var t = extendObj(o1, o2, o3);
console.log(t);
console.log(o1);
console.log(o2);
console.log(o3)
